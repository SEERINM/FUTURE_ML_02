# -*- coding: utf-8 -*-
"""Churn.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oYd1kYcRKi1BOmaGyxiWS4QFJVQq_Vp_

**1.IMPORTING DEPENDENCIES**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from imblearn.over_sampling import SMOTE
from sklearn.model_selection import train_test_split,cross_val_score
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBRFClassifier
from sklearn.metrics import accuracy_score,confusion_matrix,classification_report

"""**2.Data Loading and Understanding**"""

df = pd.read_csv("/WA_Fn-UseC_-Telco-Customer-Churn.csv")

df.shape

df.head()

pd.set_option("display.max_columns",None)

df.head(2)

df.info()

df=df.drop(columns=['customerID'])

df.head(2)

print(df["gender"].unique())

numerical_features_list = ["tenure","MonthlyCharges","TotalCharges"]
for col in df.columns:
      if col not in numerical_features_list:
           print(col,df[col].unique())
           print("-"*50)

print(df.isnull().sum())

len(df[df['TotalCharges']==" "] )

df['TotalCharges']=df["TotalCharges"].replace({" ": "0.0"})

df['TotalCharges']=df['TotalCharges'].astype(float)

print(df["Churn"].value_counts())

"""**3.Exploratory Data analysis**"""

df.shape

df.columns

df.head(2)

df.describe()

def plot_histogram(df,column_name):
      plt.figure(figsize=(5,3))
      sns.histplot(df[column_name],kde=True)
      plt.title(f"Distribution of {column_name}")
      col_mean = df[column_name].mean()
      col_median = df[column_name].median()
      plt.axvline(col_mean,color="red",linestyle = "--",label="Mean")
      plt.axvline(col_median,color="green",linestyle = "-",label="Median")
      plt.legend()
      plt.show()

plot_histogram(df,"tenure")

plot_histogram(df,"MonthlyCharges")

plot_histogram(df,"TotalCharges")

def plot_boxplot(df,column_name):
    plt.figure(figsize=(5,3))
    sns.boxplot(y=df[column_name])
    plt.title(f"Distribution of {column_name}")
    plt.ylabel(column_name)
    plt.show

plot_boxplot(df,"tenure")

plot_boxplot(df,"MonthlyCharges")

plot_boxplot(df,"TotalCharges")

"""no outliers in this case

correlation heat map for numerical columns
"""

plt.figure(figsize=(8,4))
sns.heatmap(df[["tenure","MonthlyCharges","TotalCharges"]].corr(),annot=True,cmap="coolwarm",fmt=".2f")
plt.title("Correlation HeatMap")
plt.show()

df.columns

"""count plot for categorical columns"""

object_cols = df.select_dtypes(include = "object").columns.to_list()
object_cols = ["SeniorCitizen"] + object_cols
object_cols

for col in object_cols:
     plt.figure(figsize=(5,3))
     sns.countplot(x=df[col])
     plt.title(f"Count plot of {col}")
     plt.show()

"""**4.data preprocessing**"""

df.head(3)

df["Churn"] = df["Churn"].replace({"Yes":1,"No":0})

df.head(3)

print(df["Churn"].value_counts())

object_columns = df.select_dtypes(include="object").columns

print(object_columns)



encoders = {}
import pickle
for column in object_columns:
       label_encoder = LabelEncoder()
       df[column] = label_encoder.fit_transform(df[column])
       encoders[column] = label_encoder

with open("encoders.pkl","wb") as f:
      pickle.dump(encoders, f)

encoders

"""now all strings became to o and 1 (numerical)"""

df.head(4)

"""training and testing"""

x = df.drop(columns=["Churn"])
y = df["Churn"]

X_train,X_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=42)

print(y_train.shape)

print(y_train.value_counts())

"""Synthetic Minority Oversampling TEchnique(SMOTE)"""

smote = SMOTE(random_state = 42)

X_train_smote,y_train_smote = smote.fit_resample(X_train,y_train)

print(y_train_smote.shape)

print(y_train_smote.value_counts())

"""5.Model Training"""

models = {
    "Decision Tree": DecisionTreeClassifier(random_state=42),
    "Random Forest" : RandomForestClassifier(random_state=42),
    "XGBoost":XGBRFClassifier(random_state=42)

}

cv_scores = {}
for model_name,model in models.items():
     print(model_name)
     print(model)
     print("-"*50)

cv_scores = {}
for model_name,model in models.items():
     print(f"Training {model_name}with default parameters")
     scores = cross_val_score(model,X_train_smote,y_train_smote,cv=5,scoring="accuracy")
     cv_scores[model_name] = scores
     print(f"{model_name}cross-validation accuracy:{np.mean(scores):.2f}")
     print("-"*70)

cv_scores

rfc = RandomForestClassifier(random_state=42)

model.fit(X_train_smote,y_train_smote)

"""**6.Model Evaluation**

"""

y_test_pred = model.predict(X_test)
print("Accuracy Score:\n",accuracy_score(y_test,y_test_pred))
print("Confusion Matrix:\n",confusion_matrix(y_test,y_test_pred))
print("Classification Report:\n",classification_report(y_test,y_test_pred))

model_data = {"model":rfc,"features_names":x.columns.tolist()}

with open("customer_churn_model.pkl","wb") as f:
     pickle.dump(model_data,f)

"""**7.Load the saved model and build a predictive system**"""

with open("customer_churn_model.pkl","rb") as f:
      model_data = pickle.load(f)
      loaded_model= model_data["model"]
      feature_names = model_data["features_names"]

print(loaded_model)

print(feature_names)

"""'''gender,SeniorCitizen,Partner,Dependents,tenure,PhoneService,MultipleLines,InternetService,OnlineSecurity,OnlineBackup,DeviceProtection,TechSupport,StreamingTV,StreamingMovies,Contract,PaperlessBilling,PaymentMethod,MonthlyCharges,TotalCharges,
Female,0,Yes,No,1,No,No phone service,DSL,No,Yes,No,No,No,No,Month-to-month,Yes,Electronic check,29.85,29.85,No
'''
"""

data_string = "gender,SeniorCitizen,Partner,Dependents,tenure,PhoneService,MultipleLines,InternetService,OnlineSecurity,OnlineBackup,DeviceProtection,TechSupport,StreamingTV,StreamingMovies,Contract,PaperlessBilling,PaymentMethod,MonthlyCharges,TotalCharges,\nFemale,0,Yes,No,1,No,No phone service,DSL,No,Yes,No,No,No,No,Month-to-month,Yes,Electronic check,29.85,29.85,No"

lines = data_string.strip().split('\n')
headers = [header.strip() for header in lines[0].split(',')]
values = [value.strip() for value in lines[1].split(',')]

data_dict = dict(zip(headers, values))

print(data_dict)

input_data = {'gender': 'Female', 'SeniorCitizen': '0', 'Partner': 'Yes', 'Dependents': 'No', 'tenure': '1', 'PhoneService': 'No', 'MultipleLines': 'No phone service', 'InternetService': 'DSL', 'OnlineSecurity': 'No', 'OnlineBackup': 'Yes', 'DeviceProtection': 'No', 'TechSupport': 'No', 'StreamingTV': 'No', 'StreamingMovies': 'No', 'Contract': 'Month-to-month', 'PaperlessBilling': 'Yes', 'PaymentMethod': 'Electronic check', 'MonthlyCharges': '29.85', 'TotalCharges': '29.85'}

input_data_df = pd.DataFrame([input_data])

with open("encoders.pkl","rb") as f:
    encoders = pickle.load(f)

for column,encoder in encoders.items():
     input_data_df[column] = encoder.transform(input_data_df[column])

# Fit the loaded model with the training data
loaded_model.fit(X_train_smote, y_train_smote)

prediction = loaded_model.predict(input_data_df)
pred_prob = loaded_model.predict_proba(input_data_df)
print(prediction)
print(f"Prediction: {'Churn' if prediction[0] == 1 else 'No Churn'}")
print(f"Prediction Probability:{pred_prob}")

input_data_df.head()

encoders

importances = loaded_model.feature_importances_
feature_importance_df = pd.DataFrame({'Feature': feature_names, 'Importance': importances})
feature_importance_df.sort_values(by='Importance', ascending=False).plot(kind='bar', x='Feature', y='Importance', figsize=(10,5))
plt.title("Feature Importances")
plt.show()

df['predicted_churn'] = model.predict(x)
df['churn_prob'] = model.predict_proba(x)[:,1]
df.to_csv("churn_output.csv", index=False)

